import simplegui
import time;  # This is required to include time module.

### Code for question 1-4(For checking 4 just uncomment timer2)
Count = 0
def timer_handler():
    global Count, timer
    Count += 1
    print Count
    if Count == 10:
        timer.stop()
        timer = simplegui.create_timer(1000, timer_handler)
        timer.start()

timer = simplegui.create_timer(10, timer_handler)
#timer2 = simplegui.create_timer(100, timer_handler)
timer.start()
#timer2.start()

### Code for question 5-6
ticks = time.time()
print "Number of ticks since 12:00am, January 1, 1970:", ticks
# time.time( ) :- Returns the current time instant, a floating-point number of seconds since the epoch(12:00am, January 1, 1970).

### Code for question 7
# Mystery computation in Python
# Takes input n and computes output named result
# import simplegui
# global state
result = 1
iteration = 0
max_iterations = 10
# helper functions
def init(start):
    """Initializes n."""
    global n
    n = start
    print "Input is", n
def get_next(current):
    """???  Part of mystery computation."""
    return 0.5 * (current + n / current)
# timer callback
def update():
    """???  Part of mystery computation."""
    global iteration, result
    iteration += 1
    # Stop iterating after max_iterations
    if iteration >= max_iterations:
        timer.stop()
        print "Output is", result
    else:
        result = get_next(result)
# register event handlers
timer = simplegui.create_timer(1, update)
# start program
init(13)
timer.start()

### Code for Question 8
# Takes input n and computes the sequence of numbers generated by repeatedly following the rule:
# 1. divide by two if the number is even or
# 2. multiply by 3 and add 1 if the number is odd.
#import simplegui
# define global variables
maximum, n = 0, 0
# helper functions
def init(start):
    """Initializes n."""
    global n
    n = start
    print "Input is", n
def get_next(current):
    """???  Part of mystery computation."""
    if current % 2 == 0:
        return current / 2
    else:
        return current * 3 + 1
# timer callback
def update():
    """???  Part of mystery computation."""
    global n, maximum
    maximum = max(n, maximum)
    print n
    # Stop iterating if n is 1
    if n == 1:
        timer.stop()
        print "Maximum number was ", maximum
    else:
        n = get_next(n)
# register event handlers
timer = simplegui.create_timer(1, update)
# start program
init(217)
timer.start()

### Code for Question 9
# animation of explosion using 2D sprite sheet
#import simplegui
# load 81 frame sprite sheer for explosion - image generated by phaedy explosion generator, source is hasgraphics.com
EXPLOSION_CENTER = [50, 50]
EXPLOSION_SIZE = [100, 100]
EXPLOSION_DIM = [9, 9]
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/explosion.hasgraphics.png")
# create timer that iterates current_sprite_center through sprite
time = 0
# define draw handler
def draw(canvas):
    global time
    explosion_index = [time % EXPLOSION_DIM[0], (time // EXPLOSION_DIM[0]) % EXPLOSION_DIM[1]]
    canvas.draw_image(explosion_image, 
                    [EXPLOSION_CENTER[0] + explosion_index[0] * EXPLOSION_SIZE[0], 
                     EXPLOSION_CENTER[1] + explosion_index[1] * EXPLOSION_SIZE[1]], 
                     EXPLOSION_SIZE, EXPLOSION_CENTER, EXPLOSION_SIZE)
    time += 1
# create frame and size frame based on 100x100 pixel sprite
f = simplegui.create_frame("Asteroid sprite", EXPLOSION_SIZE[0], EXPLOSION_SIZE[1])
# set draw handler and canvas background using custom HTML color
f.set_draw_handler(draw)
f.set_canvas_background("Blue")
# start animation
f.start()